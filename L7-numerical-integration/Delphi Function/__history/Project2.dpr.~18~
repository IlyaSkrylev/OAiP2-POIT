Program Project2;
{
 The program is designed to calculate integrals
 of a given function in two ways: the method of
 right rectangles and the method of trapezoids,
 and two precision: 10^-5 and 10^-6.
}

// Determining the type of console program.
{$APPTYPE CONSOLE}

// Setting the name of the module.
Uses
  System.SysUtils;

// Declaration of constant variables.
Const
  Eps1 = 1E-5;
  Eps2 = 1E-6;
  XStart1 = 0.6;
  XFinish1 = 1.4;
  XStart2 = 0.2;
  XFinish2 = 0.8;

// Description of the types used by the program.
Type
  TResult = Array[1..4,1..2] of Real;
  TIntegral = Function(X:Real): Real;
  TRes = Function(F: TIntegral; Const Dist,Left,Right: Real): Real;

{
 The function is designed to set the first function. The returned parameter is the value of the function.
}
// X - coordinate of the point.
Function F_1(X: Real): Real; Far;
Begin
  F_1 := Sqrt(Sqr(X) + 0.5)/(2*X + Sqrt(sqr(X) + 2.5));
End;

{
 The function is designed to set the first function. The returned parameter is the value of the function.
}

// X - coordinate of the point
Function F_2(X: Real): Real; Far;
Begin
  F_2 := cos(sqr(x) + 1)/(2 + sin(2*X + 0.5));
End;

{
 The function is designed to determine the area of one right rectangle. The returned parameter is the area of the rectangle.
}
// F - integrated function;
// Dist - X coordinate step;
// Left, Right - rectangle borders.
Function RightRectangle(F: TIntegral; Const Dist, Left, Right: Real): Real;
Begin
  RightRecTangle := F(Right)*Dist;
End;

{
 The function is designed to determine the area of one trapezoid. The returned parameter is the trapezoid area.
}
// F - integrated function;
// Dist - X coordinate step;
// Left, Right - rectangle borders.
Function Trapezoid(F: TIntegral; Const Dist, Left, Right: Real): Real;
Begin
  Trapezoid := ((F(Left) + F(Right))/2)*Dist;
End;

{
 The function is designed to calculate the integral. The returned parameter is an array of the integral value and the number of partitioning sections.
}
// Method - numerical integration method;
// Func - integrated function;
// XStart, XFinish - limits of integration;
// I - auxiliary variable.
Function FindResult(Method: TRes; Func: TIntegral; Const XStart, XFinish: Real; Const I: Byte): TResult;
Var
  Delta, A, H, B: Real;
  Flag: Boolean;
  Tmp: Real;
  N, J: Integer;
  // Delta - the difference between the previous and the present value of the integral;
  // A, B - shape boundaries;
  // H - the distance between the borders of the shape;
  // Tmp - previous value of the integral;
  // N - number of gaps;
  // J - auxiliary variable.

Begin

  // Initializing variables.
  Flag := True;
  N := 2;
  H := (XFinish - XStart)/N;
  Tmp := Method(Func, H, XStart, XFinish);
  Delta := abs(Result[I,1]) - abs(Tmp);

  // Finding an integral with two precision.
  While abs(Delta) > Eps2 do
  begin

    // Initialization of variables with N partitioning parts.
    H := (XFinish - XStart)/N;
    A := XStart;
    B := A + H;
    Result[I,1] := 0;

    // Finding the integral with N broken parts.
    For J := 1 to N do
    begin
      Result[I,1] := Result[I,1] + Method(Func, H, A, B);
      A := A + H;
      B := A + H;
    end;

    Delta := abs(Result[I,1]) - abs(Tmp);

    // Finding the integral at the first precision.
    If (abs(Delta) <= Eps1) and Flag then
    begin
      Result[I-1,1] := Result[I,1];
      Result[I-1,2] := N;
      Flag := False;
    end;
    Tmp := Result[I,1];
    Inc(N);
  end;
  Result[I,2] := N-1;
End;

// Assign certain data types to variables.
Var
  RRec, Trap: TResult;
  I : Integer;
  // RRec - array with results when integrating right rectangles;
  // Trap - an array with the results when integrating trapezoids;
  // I - auxiliary variable.
begin

  // Finding the first integral by right rectangles with two points.
  RRec := FindResult(RightRectangle, F_1, XStart1, XFinish1, 2);

  // Finding the second integral by right rectangles with two points.
  RRec := FindResult(RightRectangle, F_2, XStart2, XFinish2, 4);

  // Finding the first integral by trapezoids with two precision.
  Trap := FindResult(Trapezoid, F_1, XStart1, XFinish1, 2);

  // Finding the second integral by trapezoids with two precision.
  Trap := FindResult(Trapezoid, F_2, XStart2, XFinish2, 4);

  // Output of calculation results in the form of a table.
  writeln(' _______________________________________________________________________________________ ');
  writeln('|               |                 F1                |                 F2                |');
  writeln('| Метод числен- |___________________________________|___________________________________|');
  writeln('| ного интегри- |   Eps1 =  |  N  |   Eps2 =  |  N  |   Eps1 =  |  N  |   Eps2 =  |  N  |');
  writeln('| рования       |', Eps1:9, ' |     |', Eps2:9, ' |     |', Eps1:9, ' |     |', Eps2:9, ' |     |');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');
  writeln('|               |           |     |           |     |           |     |           |     |');
  writeln('| Правых прямо- |  ', RRec[1,1]:7:5,'  | ', RRec[1,2]:2:0,'  |  ', RRec[2,1]:7:6,' | ', RRec[2,2]:2:0,'  |  ', RRec[3,1]:7:5,'  | ', RRec[3,2]:3:0,' |  ', RRec[4,1]:7:6,' | ', RRec[4,2]:3:0,' | ');
  writeln('| угольников    |           |     |           |     |           |     |           |     |');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');
  writeln('|               |           |     |           |     |           |     |           |     |');
  writeln('| Трапеции      |  ', Trap[1,1]:7:5,'  | ', Trap[1,2]:2:0,'  |  ', Trap[2,1]:7:6,' | ', Trap[2,2]:3:0,' |  ', Trap[3,1]:7:5,'  | ', Trap[3,2]:3:0,' |  ', Trap[4,1]:7:6,' | ', Trap[4,2]:3:0,' | ');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');

  readln;
end.
