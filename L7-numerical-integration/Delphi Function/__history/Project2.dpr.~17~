Program Project2;
{
 Программа предназначена для вычисления интегралов заданной функцией двумя способами: методом правых прямоугольников и методом трапеций, и двух точностей: 10^-5 и 10^-6.
}

// Determining the type of console program.
{$APPTYPE CONSOLE}

// Setting the name of the module.
Uses
  System.SysUtils;

// Declaration of constant variables.
Const
  Eps1 = 1E-5;
  Eps2 = 1E-6;
  XStart1 = 0.6;
  XFinish1 = 1.4;
  XStart2 = 0.2;
  XFinish2 = 0.8;

// Описание типов, используемых программой.
Type
  TResult = Array[1..4,1..2] of Real;
  TIntegral = Function(X:Real): Real;
  TRes = Function(F: TIntegral; Const Dist,Left,Right: Real): Real;

{
 Функция предназначена для задания первой функции. Возвращаемый параметр - значение функции.
}
// X - координата X точки.
Function F_1(X: Real): Real; Far;
Begin
  F_1 := Sqrt(Sqr(X) + 0.5)/(2*X + Sqrt(sqr(X) + 2.5));
End;

{

}
//
Function F_2(X: Real): Real; Far;
Begin
  F_2 := cos(sqr(x) + 1)/(2 + sin(2*X + 0.5));
End;

{
 Функция предназначена для  определения площади одного правого прямоугольника. Возвращаемый параметр - площадь прямоугольника.
}
// F - интегрируемая функция;
// Dist - шаг координаты X;
// Left, Right - границы прямоугольника.
Function RightRectangle(F: TIntegral; Const Dist, Left, Right: Real): Real;
Begin
  RightRecTangle := F(Right)*Dist;
End;

{
 Функция предназначена для опаределения площади одной трапеции. Возвращаемый параметр - площадь трапеции.
}
// F - интегрируемая функция;
// Dist - шаг координаты X;
// Left, Right - границы прямоугольника.
Function Trapezoid(F: TIntegral; Const Dist, Left, Right: Real): Real;
Begin
  Trapezoid := ((F(Left) + F(Right))/2)*Dist;
End;

{
 Функция предназначена для вычисления интеграла. Возвращаемый параметр - массив из значения интеграла и количество участков разбиения.
}
// Method - метод численного интегрирования;
// Func - интегрируемая функция;
// XStart, XFinish - пределы интегрирования;
// I - вспомогательная переменная.
Function FindResult(Method: TRes; Func: TIntegral; Const XStart, XFinish: Real; Const I: Byte): TResult;
Var
  Delta, A, H, B: Real;
  Flag: Boolean;
  Tmp: Real;
  N, J: Integer;
  // Delta - разница между предыдущим и настоящим значением интеграла;
  // A, B - границы фигуры;
  // H - расстояние между границами фигуры;
  // Tmp - предыдущее значение интеграла;
  // N - количество промежутков;
  // J - вспомогательная переменная.

Begin

  // Инициализация перемнных.
  Flag := True;
  N := 2;
  H := (XFinish - XStart)/N;
  Tmp := Method(Func, H, XStart, XFinish);
  Delta := abs(Result[I,1]) - abs(Tmp);

  // Нахождение интеграла с двумя точностями.
  While abs(Delta) > Eps2 do
  begin

    // Инициализация переменных при N частей разбиения.
    H := (XFinish - XStart)/N;
    A := XStart;
    B := A + H;
    Result[I,1] := 0;

    // Нахождение интеграла при N разбитых частей.
    For J := 1 to N do
    begin
      Result[I,1] := Result[I,1] + Method(Func, H, A, B);
      A := A + H;
      B := A + H;
    end;

    Delta := abs(Result[I,1]) - abs(Tmp);

    // Нахождение интеграла при первой точности.
    If (abs(Delta) <= Eps1) and Flag then
    begin
      Result[I-1,1] := Result[I,1];
      Result[I-1,2] := N;
      Flag := False;
    end;
    Tmp := Result[I,1];
    Inc(N);
  end;
  Result[I,2] := N-1;
End;

// Assign certain data types to variables.
Var
  RRec, Trap: TResult;
  I : Integer;
  // RRec - массив с результатами при интегрировании правыми прямоугольниками;
  // Trap - массив с результатами при интегрировании трапециями;
  // I - вспомогательная переменна.
begin

  // Нахождение первого интеграла правыми прямоугольниками с двумя точностями.
  RRec := FindResult(RightRectangle, F_1, XStart1, XFinish1, 2);

  // Нахождение второго интеграла правыми прямоугольниками с двумя точностями.
  RRec := FindResult(RightRectangle, F_2, XStart2, XFinish2, 4);

  // Нахождение первого интеграла трапециями с двумя точностями.
  Trap := FindResult(Trapezoid, F_1, XStart1, XFinish1, 2);

  // Нахождение второго интеграла трапециями с двумя точностями.
  Trap := FindResult(Trapezoid, F_2, XStart2, XFinish2, 4);

  // Вывод результатов рассчета в виде таблицы.
  writeln(' _______________________________________________________________________________________ ');
  writeln('|               |                 F1                |                 F2                |');
  writeln('| Метод числен- |___________________________________|___________________________________|');
  writeln('| ного интегри- |   Eps1 =  |  N  |   Eps2 =  |  N  |   Eps1 =  |  N  |   Eps2 =  |  N  |');
  writeln('| рования       |', Eps1:9, ' |     |', Eps2:9, ' |     |', Eps1:9, ' |     |', Eps2:9, ' |     |');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');
  writeln('|               |           |     |           |     |           |     |           |     |');
  writeln('| Правых прямо- |  ', RRec[1,1]:7:5,'  | ', RRec[1,2]:2:0,'  |  ', RRec[2,1]:7:6,' | ', RRec[2,2]:2:0,'  |  ', RRec[3,1]:7:5,'  | ', RRec[3,2]:3:0,' |  ', RRec[4,1]:7:6,' | ', RRec[4,2]:3:0,' | ');
  writeln('| угольников    |           |     |           |     |           |     |           |     |');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');
  writeln('|               |           |     |           |     |           |     |           |     |');
  writeln('| Трапеции      |  ', Trap[1,1]:7:5,'  | ', Trap[1,2]:2:0,'  |  ', Trap[2,1]:7:6,' | ', Trap[2,2]:3:0,' |  ', Trap[3,1]:7:5,'  | ', Trap[3,2]:3:0,' |  ', Trap[4,1]:7:6,' | ', Trap[4,2]:3:0,' | ');
  writeln('|_______________|___________|_____|___________|_____|___________|_____|___________|_____|');

  readln;
end.
